{"name":"Idiomatic.js","tagline":"Principles of Writing Consistent, Idiomatic JavaScript","body":"# Principles of Writing Consistent, Idiomatic JavaScript\r\n\r\n\r\n## All code in any code-base should look like a single person typed it, no matter how many people contributed.\r\n\r\n> ### \"Arguments over style are pointless. There should be a style guide, and you should follow it\"\r\n>_Rebecca_ _Murphey_\r\n\r\n&nbsp;\r\n\r\n> ### \"Part of being a good steward to a successful project is realizing that writing code for yourself is a Bad Ideaâ„¢. If thousands of people are using your code, then write your code for maximum clarity, not your personal preference of how to get clever within the spec.\"\r\n>_Idan_ _Gazit_\r\n\r\n\r\n## Important, Non-Idiomatic Stuff:\r\n\r\n### Code Quality Tools, Resources & References\r\n\r\n * [JavaScript Plugin](http://docs.codehaus.org/display/SONAR/JavaScript+Plugin) for [Sonar](http://www.sonarsource.org/)\r\n * [Plato](https://github.com/jsoverson/plato)\r\n * [jsPerf](http://jsperf.com/)\r\n * [jsFiddle](http://jsfiddle.net/)\r\n * [jsbin](http://jsbin.com/)\r\n * [JavaScript Lint (JSL)](http://javascriptlint.com/)\r\n * [jshint](http://jshint.com/)\r\n * [jslint](http://jslint.org/)\r\n\r\n## Get Smart\r\n\r\n### [Annotated ECMAScript 5.1](http://es5.github.com/)\r\n### [EcmaScript Language Specification, 5.1 Edition](http://ecma-international.org/ecma-262/5.1/)\r\n\r\nThe following should be considered 1) incomplete, and 2) *REQUIRED READING*. I don't always agree with the style written by the authors below, but one thing is certain: They are consistent. Furthermore, these are authorities on the language.\r\n\r\n * [Baseline For Front End Developers](http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/)\r\n * [Eloquent JavaScript](http://eloquentjavascript.net/)\r\n * [JavaScript, JavaScript](http://javascriptweblog.wordpress.com/)\r\n * [Adventures in JavaScript Development](http://rmurphey.com/)\r\n * [Perfection Kills](http://perfectionkills.com/)\r\n * [Douglas Crockford's Wrrrld Wide Web](http://www.crockford.com)\r\n * [JS Assessment](https://github.com/rmurphey/js-assessment)\r\n * [Leveraging Code Quality Tools by Anton Kovalyov](http://anton.kovalyov.net/slides/gothamjs/)\r\n\r\n\r\n\r\n\r\n### Build & Deployment Process\r\n\r\nProjects should always attempt to include some generic means by which source can be linted, tested and compressed in preparation for production use. For this task, [grunt](https://github.com/gruntjs/grunt) by Ben Alman is second to none and has officially replaced the \"kits/\" directory of this repo.\r\n\r\n\r\n\r\n\r\n### Test Facility\r\n\r\nProjects _must_ include some form of unit, reference, implementation or functional testing. Use case demos DO NOT QUALIFY as \"tests\". The following is a list of test frameworks, none of which are endorsed more than the other.\r\n\r\n * [QUnit](http://github.com/jquery/qunit)\r\n * [Jasmine](https://github.com/pivotal/jasmine)\r\n * [Vows](https://github.com/cloudhead/vows)\r\n * [Mocha](https://github.com/visionmedia/mocha)\r\n * [Hiro](http://hirojs.com/)\r\n * [JsTestDriver](https://code.google.com/p/js-test-driver/)\r\n * [Buster.js](http://busterjs.org/)\r\n * [Sinon.js](http://sinonjs.org/)\r\n\r\n## Table of Contents\r\n\r\n * [Whitespace](#whitespace)\r\n * [Beautiful Syntax](#spacing)\r\n * [Type Checking (Courtesy jQuery Core Style Guidelines)](#type)\r\n * [Conditional Evaluation](#cond)\r\n * [Practical Style](#practical)\r\n * [Naming](#naming)\r\n * [Misc](#misc)\r\n * [Native & Host Objects](#native)\r\n * [Comments](#comments)\r\n * [One Language Code](#language)\r\n\r\n\r\n\r\n------------------------------------------------\r\n\r\n\r\n## Preface\r\n\r\nThe following sections outline a _reasonable_ style guide for modern JavaScript development and are not meant to be prescriptive. The most important take-away is the **law of code style consistency**. Whatever you choose as the style for your project should be considered law. Link to this document as a statement of your project's commitment to code style consistency, readability and maintainability.\r\n\r\n\r\n\r\n\r\n\r\n## Idiomatic Style Manifesto\r\n\r\n\r\n1. <a name=\"whitespace\">Whitespace</a>\r\n  - Indent with tabs, align with spaces.\r\n      - Use tabs to indent your code.\r\n      - Use spaces only to align documentation, so that they stay lined up irrespective of tab sizes.\r\n      - Never mix tabs and spaces.\r\n  - If your editor supports it, always work with the \"show invisibles\" setting turned on. The benefits of this practice are:\r\n      - Enforced consistency\r\n      - Eliminating end of line whitespace\r\n      - Eliminating blank line whitespace\r\n      - Commits and diffs that are easier to read\r\n\r\n\r\n2. <a name=\"spacing\">Beautiful Syntax</a>\r\n\r\n    A. Parens, Braces, Linebreaks\r\n\r\n    ```javascript\r\n\r\n    // if/else/for/while/try always have spaces, braces and span multiple lines\r\n    // this encourages readability\r\n\r\n    // 2.A.1.1\r\n    // Examples of really cramped syntax\r\n\r\n    if(condition) doSomething();\r\n\r\n    while(condition) iterating++;\r\n\r\n    for(var i=0;i<100;i++) someIterativeFn();\r\n\r\n\r\n    // 2.A.1.1\r\n    // Use whitespace to promote readability\r\n\r\n    if (condition) {\r\n      // statements\r\n    }\r\n\r\n    while (condition) {\r\n      // statements\r\n    }\r\n\r\n    for (var i = 0; i < 100; i++) {\r\n      // statements\r\n    }\r\n\r\n    // Even better:\r\n\r\n    var i,\r\n      length = 100;\r\n\r\n    for (i = 0; i < length; i++) {\r\n      // statements\r\n    }\r\n\r\n    // Or...\r\n\r\n    var i = 0,\r\n      length = 100;\r\n\r\n    for (; i < length; i++) {\r\n      // statements\r\n    }\r\n\r\n    var prop;\r\n\r\n    for (prop in object) {\r\n      // statements\r\n    }\r\n\r\n\r\n    if (true) {\r\n      // statements\r\n    } else {\r\n      // statements\r\n    }\r\n    ```\r\n\r\n\r\n    B. Assignments, Declarations, Functions ( Named, Expression, Constructor )\r\n\r\n    ```javascript\r\n\r\n    // 2.B.1.1\r\n    // Variables\r\n    var foo = \"bar\",\r\n      num = 1,\r\n      undef;\r\n\r\n    // Literal notations:\r\n    var array = [],\r\n      object = {};\r\n\r\n\r\n    // 2.B.1.2\r\n    // Using only one `var` per scope (function) promotes readability\r\n    // and keeps your declaration list free of clutter (also saves a few keystrokes)\r\n\r\n    // Bad\r\n    var foo = \"\";\r\n    var bar = \"\";\r\n    var qux;\r\n\r\n    // Good\r\n    var foo = \"\",\r\n      bar = \"\",\r\n      quux;\r\n\r\n    // or..\r\n    var // Comment on these\r\n    foo = \"\",\r\n    bar = \"\",\r\n    quux;\r\n\r\n    // 2.B.1.3\r\n    // var statements should always be in the beginning of their respective scope (function).\r\n    // Same goes for const and let from ECMAScript 6.\r\n\r\n    // Bad\r\n    function foo() {\r\n\r\n      // some statements here\r\n\r\n      var bar = \"\",\r\n        qux;\r\n    }\r\n\r\n    // Good\r\n    function foo() {\r\n      var bar = \"\",\r\n        qux;\r\n\r\n      // all statements after the variables declarations.\r\n    }\r\n    ```\r\n\r\n    ```javascript\r\n\r\n    // 2.B.2.1\r\n    // Named Function Declaration\r\n    function foo(arg1, argN) {\r\n\r\n    }\r\n\r\n    // Usage\r\n    foo(arg1, argN);\r\n\r\n\r\n    // 2.B.2.2\r\n    // Named Function Declaration\r\n    function square(number) {\r\n      return number * number;\r\n    }\r\n\r\n    // Usage\r\n    square(10);\r\n\r\n    // Really contrived continuation passing style\r\n    function square(number, callback) {\r\n      callback(number * number);\r\n    }\r\n\r\n    square(10, function(square) {\r\n      // callback statements\r\n    });\r\n\r\n\r\n    // 2.B.2.3\r\n    // Function Expression\r\n    var square = function(number) {\r\n      // Return something valuable and relevant\r\n      return number * number;\r\n    };\r\n\r\n    // Function Expression with Identifier\r\n    // This preferred form has the added value of being\r\n    // able to call itself and have an identity in stack traces:\r\n    var factorial = function factorial(number) {\r\n      if (number < 2) {\r\n        return 1;\r\n      }\r\n\r\n      return number * factorial(number - 1);\r\n    };\r\n\r\n\r\n    // 2.B.2.4\r\n    // Constructor Declaration\r\n    function FooBar(options) {\r\n\r\n      this.options = options;\r\n    }\r\n\r\n    // Usage\r\n    var fooBar = new FooBar({ a: \"alpha\" });\r\n\r\n    fooBar.options;\r\n    // { a: \"alpha\" }\r\n\r\n    ```\r\n\r\n\r\n    C. Consistency Always Wins\r\n\r\n    In sections 2.A-2.C, the whitespace rules are set forth as a recommendation with a simpler, higher purpose: consistency.\r\n    It's important to note that formatting preferences, such as \"inner whitespace\" should be considered optional, but only one style should exist across the entire source of your project.\r\n\r\n    ```javascript\r\n\r\n    // 2.D.1.1\r\n\r\n    if (condition) {\r\n      // statements\r\n    }\r\n\r\n    while (condition) {\r\n      // statements\r\n    }\r\n\r\n    for (var i = 0; i < 100; i++) {\r\n      // statements\r\n    }\r\n\r\n    if (true) {\r\n      // statements\r\n    } else {\r\n      // statements\r\n    }\r\n\r\n    ```\r\n\r\n    D. Quotes\r\n\r\n    Use only single quotes for strings for the sake of consistency. \r\n\r\n    F. End of Lines and Empty Lines\r\n\r\n    Whitespace can ruin diffs and make changesets impossible to read. Consider incorporating a pre-commit hook that removes end-of-line whitespace and blanks spaces on empty lines automatically.\r\n\r\n3. <a name=\"type\">Type Checking (Courtesy jQuery Core Style Guidelines and Underscore.js)</a>\r\n\r\n    A. Actual Types\r\n\r\n    String:\r\n\r\n        _.isString(variable)\r\n\r\n    Number:\r\n\r\n        _.isNumber(variable)\r\n\r\n    Boolean:\r\n\r\n        _.isBoolean(variable)\r\n\r\n    Object:\r\n\r\n        _.isObject(variable)\r\n\r\n    Array:\r\n\r\n        _.isArray(arrayLikeObject)\r\n\r\n    Node:\r\n\r\n        elem.nodeType === 1\r\n\r\n    null:\r\n\r\n        _.isNull(variable)\r\n\r\n    null or undefined:\r\n\r\n        _.isNull(variable) || _.isUndefined(variable)\r\n\r\n    undefined:\r\n\r\n      Global Variables:\r\n\r\n        typeof variable === \"undefined\"\r\n\r\n      Local Variables and properties:\r\n\r\n        _.isUndefined(variable)\r\n        _.isUndefined(object.prop)\r\n\r\n    B. Coerced Types\r\n\r\n    Avoid implicit type coercion. Use only `===` and `!==` for comparison. Prefer `parseInt(value, 10)` or `parseFloat(value)` to unary + or - operators.\r\n\r\n\r\n4. <a name=\"cond\">Conditional Evaluation</a>\r\n\r\n    ```javascript\r\n\r\n    // 4.1.1\r\n    // When only evaluating that an array has length,\r\n    // instead of this:\r\n    if (array.length > 0) ...\r\n\r\n    // ...evaluate truthiness, like this:\r\n    if (array.length) ...\r\n\r\n\r\n    // 4.1.2\r\n    // When only evaluating that an array is empty,\r\n    // instead of this:\r\n    if (array.length === 0) ...\r\n\r\n    // ...evaluate truthiness, like this:\r\n    if (!array.length) ...\r\n\r\n\r\n    // 4.1.3\r\n    // When only evaluating that a string is not empty,\r\n    // instead of this:\r\n    if (string !== \"\") ...\r\n\r\n    // ...evaluate truthiness, like this:\r\n    if (string) ...\r\n\r\n\r\n    // 4.1.4\r\n    // When only evaluating that a string _is_ empty,\r\n    // instead of this:\r\n    if (string === \"\") ...\r\n\r\n    // ...evaluate falsy-ness, like this:\r\n    if (!string) ...\r\n\r\n\r\n    // 4.1.5\r\n    // When only evaluating that a reference is true,\r\n    // instead of this:\r\n    if (foo === true) ...\r\n\r\n    // ...evaluate like you mean it, take advantage of built in capabilities:\r\n    if (foo) ...\r\n\r\n\r\n    // 4.1.6\r\n    // When evaluating that a reference is false,\r\n    // instead of this:\r\n    if (foo === false) ...\r\n\r\n    // ...use negation to coerce a true evaluation\r\n    if (!foo) ...\r\n\r\n    // ...Be careful, this will also match: 0, \"\", null, undefined, NaN\r\n    // If you _MUST_ test for a boolean false, then use\r\n    if (foo === false) ...\r\n\r\n\r\n    ```\r\n    ALWAYS evaluate for the best, most accurate result - the above is a guideline, not a dogma.\r\n\r\n5. <a name=\"practical\">Practical Style</a>\r\n\r\n    ```javascript\r\n\r\n    // 5.1.1\r\n    // A Practical Module\r\n\r\n    define('path/to/module', ['path/to/dep1', 'path/to/dep2'], function(dep1, dep2) {\r\n\r\n      var data = \"secret\";\r\n\r\n      // Other things might happen here\r\n\r\n      // expose our module to the global object\r\n      return {\r\n        // This is some boolean property\r\n        bool: true,\r\n        // Some string value\r\n        string: \"a string\",\r\n        // An array property\r\n        array: [ 1, 2, 3, 4 ],\r\n        // An object property\r\n        object: {\r\n          lang: \"en-Us\"\r\n        },\r\n        getData: function() {\r\n          // get the current value of `data`\r\n          return data;\r\n        },\r\n        setData: function(value) {\r\n          // set the value of `data` and return it\r\n          return (data = value);\r\n        }\r\n      };\r\n\r\n    });\r\n\r\n    ```\r\n\r\n    ```javascript\r\n\r\n    // 5.2.1\r\n    // A Practical Constructor\r\n\r\n    define('path/to/module', ['path/to/dep1', 'path/to/dep2'], function(dep1, dep2) {\r\n\r\n      function Ctor(foo) {\r\n\r\n        this.foo = foo;\r\n\r\n      }\r\n\r\n      Ctor.prototype.getFoo = function() {\r\n        return this.foo;\r\n      };\r\n\r\n      Ctor.prototype.setFoo = function(val) {\r\n        return (this.foo = val);\r\n      };\r\n\r\n      // expose our constructor to the global object\r\n      return Ctor;\r\n\r\n    });\r\n\r\n    ```\r\n\r\n\r\n\r\n6. <a name=\"naming\">Naming</a>\r\n\r\n\r\n\r\n    A. You are not a human code compiler/compressor, so don't try to be one.\r\n\r\n    The following code is an example of egregious naming:\r\n\r\n    ```javascript\r\n\r\n    // 6.A.1.1\r\n    // Example of code with poor names\r\n\r\n    function q(s) {\r\n      return document.querySelectorAll(s);\r\n    }\r\n    var i,a=[],els=q(\"#foo\");\r\n    for(i=0;i<els.length;i++){a.push(els[i]);}\r\n    ```\r\n\r\n    Without a doubt, you've written code like this - hopefully that ends today.\r\n\r\n    Here's the same piece of logic, but with kinder, more thoughtful naming (and a readable structure):\r\n\r\n    ```javascript\r\n\r\n    // 6.A.2.1\r\n    // Example of code with improved names\r\n\r\n    function query(selector) {\r\n      return document.querySelectorAll(selector);\r\n    }\r\n\r\n    var idx = 0,\r\n      elements = [],\r\n      matches = query(\"#foo\"),\r\n      length = matches.length;\r\n\r\n    for (; idx < length; idx++) {\r\n      elements.push(matches[ idx ]);\r\n    }\r\n\r\n    ```\r\n\r\n    A few additional naming pointers:\r\n\r\n    ```javascript\r\n\r\n    // 6.A.3.1\r\n    // Naming strings\r\n\r\n    `dog` is a string\r\n\r\n\r\n    // 6.A.3.2\r\n    // Naming arrays\r\n\r\n    `dogs` is an array of `dog` strings\r\n\r\n\r\n    // 6.A.3.3\r\n    // Naming functions, objects, instances, etc\r\n\r\n    camelCase; function and var declarations\r\n\r\n\r\n    // 6.A.3.4\r\n    // Naming constructors, prototypes, etc.\r\n\r\n    PascalCase; constructor function\r\n\r\n\r\n    // 6.A.3.5\r\n    // From the Google Closure Library Style Guide\r\n\r\n    functionNamesLikeThis;\r\n    variableNamesLikeThis;\r\n    ConstructorNamesLikeThis;\r\n    EnumNamesLikeThis;\r\n    methodNamesLikeThis;\r\n    SYMBOLIC_CONSTANTS_LIKE_THIS;\r\n\r\n    ```\r\n\r\n    B. Faces of `this`\r\n\r\n    Beyond the generally well known use cases of `call` and `apply`, always prefer `_.bind(fn, this)`, for creating `BoundFunction` definitions for later invocation. Only resort to aliasing when no preferable option is available.\r\n\r\n    ```javascript\r\n    // 6.B.2\r\n\r\n    // eg. lodash/underscore, _.bind()\r\n    function Device(opts) {\r\n\r\n      this.value = null;\r\n\r\n      stream.read(opts.path, _.bind(function(data) {\r\n\r\n        this.value = data;\r\n\r\n      }, this));\r\n\r\n      setInterval(_.bind(function() {\r\n\r\n        this.emit(\"event\");\r\n\r\n      }, this), opts.freq || 100);\r\n    }\r\n\r\n    ```\r\n\r\n    As a last resort, create an alias to `this` using `self` as an Identifier. This is extremely bug prone and should be avoided whenever possible.\r\n\r\n    ```javascript\r\n\r\n    // 6.B.3\r\n\r\n    function Device(opts) {\r\n      var self = this;\r\n\r\n      this.value = null;\r\n\r\n      stream.read(opts.path, function( data) {\r\n\r\n        self.value = data;\r\n\r\n      });\r\n\r\n      setInterval(function() {\r\n\r\n        self.emit(\"event\");\r\n\r\n      }, opts.freq || 100);\r\n    }\r\n\r\n    ```\r\n\r\n\r\n    C. Use `thisArg`\r\n\r\n    Several Array methods of underscore.js support `thisArg` signature, which should be used whenever possible\r\n\r\n    ```javascript\r\n\r\n    // 6.C.1\r\n\r\n    var obj;\r\n\r\n    obj = { f: \"foo\", b: \"bar\", q: \"qux\" };\r\n\r\n    _.forEach(_.keys(obj), function(key) {\r\n\r\n      // |this| now refers to `obj`\r\n\r\n      console.log(this[ key ]);\r\n\r\n    }, obj ); // <-- the last arg is `thisArg`\r\n\r\n    // Prints...\r\n\r\n    // \"foo\"\r\n    // \"bar\"\r\n    // \"qux\"\r\n\r\n    ```\r\n\r\n7. <a name=\"misc\">Misc</a>\r\n\r\n    This section will serve to illustrate ideas and concepts that should not be considered dogma, but instead exists to encourage questioning practices in an attempt to find better ways to do common JavaScript programming tasks.\r\n\r\n    A. Early returns promote code readability with negligible performance difference\r\n\r\n    ```javascript\r\n\r\n    // 7.B.1.1\r\n    // Bad:\r\n    function returnLate(foo) {\r\n      var ret;\r\n\r\n      if (foo) {\r\n        ret = \"foo\";\r\n      } else {\r\n        ret = \"quux\";\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Good:\r\n\r\n    function returnEarly(foo) {\r\n\r\n      if (foo) {\r\n        return \"foo\";\r\n      }\r\n      return \"quux\";\r\n    }\r\n\r\n    ```\r\n\r\n8. <a name=\"comments\">Comments</a>\r\n\r\n    #### Single line above the code that is subject\r\n    #### Multiline is good\r\n    #### JSDoc style is good, but requires a significant time investment\r\n\r\n\r\n9. <a name=\"language\">One Language Code</a>\r\n\r\n    Programs should be written in one language, whatever that language may be, as dictated by the maintainer or maintainers.\r\n\r\n\r\n----------\r\n\r\n\r\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by/3.0/deed.en_US\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"http://i.creativecommons.org/l/by/3.0/80x15.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\">Principles of Writing Consistent, Idiomatic JavaScript</span> by <a xmlns:cc=\"http://creativecommons.org/ns#\" href=\"https://github.com/rwldrn/idiomatic.js\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Rick Waldron and Contributors</a> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/3.0/deed.en_US\">Creative Commons Attribution 3.0 Unported License</a>.<br />Based on a work at <a xmlns:dct=\"http://purl.org/dc/terms/\" href=\"https://github.com/rwldrn/idiomatic.js\" rel=\"dct:source\">github.com/rwldrn/idiomatic.js</a>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}